struct CooElement {
       row : i32,
       col : i32,
       value : f64
}

fn @(?a & ?b & ?s) unroll_step(a : i32, @b : i32, @s : i32, f : fn(i32) -> ()) -> () {
    if a < b { 
        @@f(a); 
        unroll_step(a + s, b, s, f) 
    }
}
fn @unroll(a : i32, b : i32, f : fn(i32) -> ()) -> () { 
    unroll_step(a, b, 1, f) 
}

extern "C" {
    fn println(i32) -> ();
}

// Calculates the product of two sparse matrices
// Both in COO format
extern
fn @mult_matrix_matrix(
        first_matrix: &[CooElement],
        first_matrix_nonzero: i32,
        second_matrix: &[CooElement],
        second_matrix_nonzero : i32)
         -> &[CooElement] {

    let mut current_buffer_pos : i32 = 0; 
    for i in unroll(0, first_matrix_nonzero) {
        for j in unroll(0, second_matrix_nonzero) {
            if second_matrix(j).row == first_matrix(i).col {
                let new_value : f64 = second_matrix(j).value * first_matrix(i).value;
                buffer(current_buffer_pos).value = new_value;

        
                buffer(current_buffer_pos).row = first_matrix(i).row;
                buffer(current_buffer_pos).col = second_matrix(j).col;
                current_buffer_pos += 1
            }
        }
    }

    let mut current_result_pos : i32 = 0;
    for i in unroll(0, current_buffer_pos) {
        for j in unroll(0, current_result_pos + 1) {
            if j == current_result_pos {
                result(current_result_pos) = buffer(i);
                current_result_pos += 1;
                break()
            } else if result(j).row == buffer(i).row && result(j).col == buffer(i).col {
                result(j).value += buffer(i).value
            }
        }
    }

    *result_size = current_result_pos 
}
